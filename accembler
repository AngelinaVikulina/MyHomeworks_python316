section .bss 
    str resb 16    ; выделение памяти для строки ввода длиной до 16 символов
    num resb 4     ; выделение памяти для хранения целого числа

section .text
    global scan_int       ; объявление функции scan_int
    scan_int:
        mov eax, 3         ; загрузка системного вызова read (для чтения)
        mov ebx, 0         ; файловый дескриптор 0 = stdin (стандартный ввод)
        mov ecx, str       ; загрузка буфера для чтения ввода
        mov edx, 15        ; чтение до 15 байт
        int 0x80           

        mov eax, str       ; загрузка адреса строки
        call atoi          ; вызов функции atoi для преобразования строки в целое число
        ret

    atoi:
        xor eax, eax       ; очистка регистра EAX
        xor ecx, ecx       ; очистка регистра ECX

    .skip_whitespace_loop:
        movzx edi, byte [eax + ecx]   ; загрузка текущего символа
        test edi, edi                  ; проверка на конец строки
        jz .atoi_done                   ; выход из цикла, если конец строки
        cmp edi, 32                    ; сравнение с пробелом
        je .skip_loop
        inc ecx                        ; переход к следующему символу
        jmp .skip_whitespace_loop

    .skip_loop:
        mov edx, 10                    ; умножение текущего результата на 10 перед добавлением новой цифры
        mul edx
        sub edi, '0'                   ; преобразование ASCII в число
        add eax, edi                   ; добавление новой цифры к результату
        inc ecx                        ; переход к следующему символу
        jmp .skip_whitespace_loop
        
    .atoi_done:
        ret

section .data
    msg_sum db "Сумма: ", 0xa          ; сообщение "Сумма: " и перевод строки
    len_sum equ $ - msg_sum             ; длина сообщения "Сумма: "
    msg_mult db "Произведение: ", 0xa  ; сообщение "Произведение: " и перевод строки
    len_mult equ $ - msg_mult           ; длина сообщения "Произведение: "

section .text
    global _start

    _start:
        call scan_int                   ; вызов функции для считывания первого целого числа
        push eax                        ; сохранение первого числа

        call scan_int                   ; вызов функции для считывания второго целого числа
        push eax                        ; сохранение второго числа
        
        pop ebx                         ; извлечение второго числа
        pop ecx                         ; извлечение первого числа
        
        add ecx, ebx                    ; вычисление суммы
        push ecx                        ; сохранение суммы
        
        call print_int                  ; вызов функции для вывода суммы на экран
        
        mov eax, ecx                    ; сохранение суммы в регистре для последующих вычислений
        
        pop ebx                         ; извлечение второго числа
        pop ecx                         ; извлечение первого числа
        
        imul ecx, ebx                   ; вычисление произведения
        push ecx                        ; сохранение произведения

        call print_int                  ; вызов функции для вывода произведения на экран

        mov eax, 1                      ; системный вызов для выхода
        xor ebx, ebx                    ; код завершения 0
        int 0x80                        ; вызов системного вызова для завершения программы

    include 'print_int_func.asm'       ; подключение файла с функцией вывода целого числа
    include 'scan_int_func.asm'        ; подключение файла с функцией считывания целого числа
